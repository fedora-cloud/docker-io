From 11d1fa3018f6c53e709870b0fce185dfddbe8c6f Mon Sep 17 00:00:00 2001
From: Lokesh Mandvekar <lsm5@redhat.com>
Date: Sat, 14 Jun 2014 18:33:10 -0400
Subject: [PATCH] RHBZ#1109039 finalize namespace error

Link to original PR: https://github.com/docker/libcontainer/pull/17

Sometimes I was getting:

2014/06/13 13:47:24 finalize namespace drop bounding set read /proc/1/status: bad file descriptor

This happens when applying the capabilities, and the code that
reads the current caps opens /proc/1/status and then reads some data from it.
But during this it gets a EBADFD error.

The problem is that FinalizeNamespace() closes all FDs before applying
the caps, and if a GC then happens after /proc/1/status is opened but
before reading from the fd, then an old os.File finalizer may close the
already closed-and-reused fd, wreaking havoc.

We fix this by running the GC before closing all the FDs to avoid
the risk of this happening to later os.File users, as well as
moving the fd closing to the after setting the capabilities.

Docker-DCO-1.1-Signed-off-by: Alexander Larsson <alexl@redhat.com> (github: alexlarsson)
---
 pkg/libcontainer/namespaces/init.go | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)

diff --git a/pkg/libcontainer/namespaces/init.go b/pkg/libcontainer/namespaces/init.go
index b53c566..554daf7 100644
--- a/pkg/libcontainer/namespaces/init.go
+++ b/pkg/libcontainer/namespaces/init.go
@@ -185,10 +185,6 @@ func setupRoute(container *libcontainer.Container) error {
 // and working dir, and closes any leaky file descriptors
 // before execing the command inside the namespace
 func FinalizeNamespace(container *libcontainer.Container) error {
-	if err := system.CloseFdsFrom(3); err != nil {
-		return fmt.Errorf("close open file descriptors %s", err)
-	}
-
 	// drop capabilities in bounding set before changing user
 	if err := capabilities.DropBoundingSet(container); err != nil {
 		return fmt.Errorf("drop bounding set %s", err)
@@ -217,6 +213,16 @@ func FinalizeNamespace(container *libcontainer.Container) error {
 			return fmt.Errorf("chdir to %s %s", container.WorkingDir, err)
 		}
 	}
+
+	// Run the GC to ensure all outstanding os.File are finalized
+	// otherwise the below close could cause problems due to the
+	// GC causing an re-used fd to be closed.
+	runtime.GC()
+
+	if err := system.CloseFdsFrom(3); err != nil {
+		return fmt.Errorf("close open file descriptors %s", err)
+	}
+
 	return nil
 }

-- 
1.9.3

